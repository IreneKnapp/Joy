LANGUAGE Joy/1.0 Haskell
module Main where

import Control.Monad.Error

--
MONAD { Parse }
ERROR { parseError }

LEXER NAME expressionLexer
| '[0-9]+'                         { Integer $ read $0 }
| '[a-zA-Z_][a-zA-Z_0-9]*'         { Identifier $0 }
| '\+'                             { Plus }
| '-'	                           { Minus }
| '\*'	                           { Star }
| '/'	                           { Slash }
| '\('	                           { LeftParenthesis }
| '\)'	                           { RightParenthesis }

LEXER NAME argumentLexer
| '[0-9]+'                         { Integer $ read $0 }
| ','                              { Comma }
| '\('	                           { LeftParenthesis }
| '\)'	                           { RightParenthesis }

USER LEXER NAME stringArgumentLexer

TOKEN TYPE { Token } NAMES
| integer       { Integer $$ }
| identifier    { Identifier $$ }
| string        { StringLiteral $$ }
| '+'           { Plus }
| '-'           { Minus }
| '*'           { Star }
| '/'           { Slash }
| ','           { Comma }
| '('           { LeftParenthesis }
| ')'           { RightParenthesis }

PARSER { parseExpression }
Expression :: { Int }
    | Term
    { $1 }
    | Expression '+' Term
    { $1 + $3 }
    | Expression '-' Term
    { $1 - $3 }

Term :: { Int }
    | Factor
    { $1 }
    | Term '*' Factor
    { $1 * $3 }
    | Term '/' Factor
    { $1 / $3 }

Factor :: { Int }
    | integer
    { $1 }
    | '(' Expression ')'
    { $2 }

--

type Parse = ErrorT ParseError (StateT String IO)

data Token = Integer Int
           | Plus
           | Minus
           | Star
           | Slash
           | LeftParenthesis
           | RightParenthesis

data ParseError = ParseError String
instance Error ParseError where
    strMsg message = ParseError message
instance Show ParseError where
    show (ParseError string) = string

main :: IO ()
main = do
  let loop = do
        line <- getLine
        case line of
          "" -> return ()
          _ -> do
            eitherErrorResult = runError (parseExpression line)
            case eitherErrorResult of
              Left error -> putStrLn $ "Parse error: " ++ (show error)
              Right result -> putStrLn $ "Result: " ++ (show result)
            loop
  loop


stringArgumentLexer :: String -> Parse Token
stringArgumentLexer = do
  input <- get
  let readAtParenthesisDepth _ []
          = fail $ "Unexpected end of input in string argument."
      readAtParenthesisDepth 0 (',':rest) = return (",", rest)
      readAtParenthesisDepth 0 (')':rest)
          = fail $ "Unbalanced right parenthesis in string argument."
      readAtParenthesisDepth 0 (c:rest) = do
        (result, rest) <- readAtParenthesisDepth 0 rest
        return ([c] ++ result, rest)
      readAtParenthesisDepth depth ('(':rest) = do
        (result1, rest) <- readAtParenthesisDepth (depth + 1) rest
        (result2, rest) <- readAtParenthesisDepth depth rest
        return ("(" ++ result1 ++ result2, rest)
      readAtParenthesisDepth depth (')':rest) = return (")", rest)
      readAtParenthesisDepth depth (c:rest) = do
        (result, rest) <- readAtParenthesisDepth depth rest
        return ([c] ++ result, rest)
  (result, rest) <- readAtParenthesisDepth 0 input
  put rest
  return $ StringLiteral result
