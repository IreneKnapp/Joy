LANGUAGE Joy/1.0 Haskell
module Main where

import Control.Monad.Error
import Data.Char
import Numeric

--
MONAD { Parse }
ERROR { parseError }

LEXER NAME cppLexer

| SUBEXPRESSION hex '[0-9a-fA-F]'
| SUBEXPRESSION shortCharacterName
  '\\u({hex}{hex}{hex}{hex})'
  { readHexEscape $1 }
| SUBEXPRESSION longCharacterName
  '\\U({hex}{hex}{hex}{hex}{hex}{hex}{hex}{hex})'
  { readHexEscape $1 }
| SUBEXPRESSION ucn
  '{shortCharacterName}|{longCharacterName}'

| SUBEXPRESSION simpleEscape
  '\\''|\\"|\\?|\\\\|\\a|\\b|\\f|\\n|\\r|\\t|\\v'
  { readSimpleEscape $0 }
| SUBEXPRESSION octalEscape
  '\\([0-7]([0-7][0-7]?)?)'
  { readOctalEscape $1 }
| SUBEXPRESSION hexadecimalEscape
  '\\x({hex}+)'
  { readHexEscape $1 }
| SUBEXPRESSION escape
  '{simpleEscape}|{octalEscape}|{hexadecimalEscape}|{ucn}'
| '([a-zA-Z_]|{ucn})([a-zA-Z0-9_]|{ucn})*'
                                         { CPPIdentifier $0 }
| '\.?[0-9]([a-zA-Z_0-9.]|[eEpP][+\-])*' { CPPNumber $0 }
| '''(([^''\\\n]|{escape})*)'''          { CPPCharacterConstant False $1 }
| 'L''(([^''\\\n]|{escape})*)'''         { CPPCharacterConstant True $1 }
| '"(([^"\\\n]|{escape})*)"'             { CPPStringLiteral False $1 }
| 'L"(([^"\\\n]|{escape})*)"'            { CPPStringLiteral True $1 }

| SUBEXPRESSION punctuatorsA
  '\[|\]|\(|\)|\{|\}|\.|->|\+\+|--|&|\*|\+|-|~|!|/|%|<<|>>|<|>|<=|>=|==|!='
| SUBEXPRESSION punctuatorsB
  '^|\||&&|\|\||\?|:|;|...|=|\*=|/=|%=|\+=|-=|<<=|>>=|&=|^=|\|=|,'
| SUBEXPRESSION punctuatorsC
  '#|##|<:|:>|<%|%>|%:|%:%:'
| '{punctuatorsA}|{punctuatorsB}|{punctuatorsC}'
                                         { CPPPunctuator $0 }

| '( |\t|\n|\v|\f)+'                     { CPPWhitespace $0 }
| '/\*(((?!\*/).)*)\*/'                  { CPPMultilineComment $1 }
| '//([^\n]*)(?=\n)'                     { CPPLineComment $1 }
| '.'                                    { CPPOther $0 }

LEXER NAME cppHeaderNameLexer PARENT cppLexer
| '"([^\n"]+)"'                          { CPPHeaderName False $1 }
| '<([^\n>]+)>'                          { CPPHeaderName True $1 }

--

type Parse = Error ParseError


data CPPToken = CPPHeaderName Bool String
              | CPPIdentifier String
              | CPPNumber String
              | CPPCharacterConstant Bool String
              | CPPStringLiteral Bool String
              | CPPPunctuator String
              | CPPWhitespace String
              | CPPLineComment String
              | CPPMultilineComment String
              | CPPOther String
                deriving (Show)

data ParseError = ParseError String
instance Error ParseError where
    strMsg message = ParseError message
instance Show ParseError where
    show (ParseError string) = string


readSimpleEscape :: String -> String
readSimpleEscape "\\'" = "'"
readSimpleEscape "\\\"" = "\""
readSimpleEscape "\\?" = "?"
readSimpleEscape "\\\\" = "\\"
readSimpleEscape "\\a" = "\a"
readSimpleEscape "\\b" = "\b"
readSimpleEscape "\\f" = "\f"
readSimpleEscape "\\n" = "\n"
readSimpleEscape "\\r" = "\r"
readSimpleEscape "\\t" = "\t"
readSimpleEscape "\\v" = "\v"


readOctalEscape :: String -> String
readOctalEscape input = [chr $ readOct input]


readHexEscape :: String -> String
readHexEscape input = [chr $ readHex input]


main :: IO ()
main = do
  let loop = do
        line <- getLine
        case line of
          "" -> return ()
          _ -> do
            eitherErrorResult = runError (cppLexer line)
            case eitherErrorResult of
              Left error -> putStrLn $ "Parse error: " ++ (show error)
              Right result -> putStrLn $ "Result: " ++ (show result)
            loop
  loop
