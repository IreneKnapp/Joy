LANGUAGE Joy/1.0 Haskell
module Main where

import Control.Monad.Error

--
MONAD { Parse }
ERROR { parseError }

LEXER
| '[0-9]+'      { Integer $ read $0 }
| '\+'          { Plus }
| '-'	        { Minus }
| '\*'	        { Star }
| '/'	        { Slash }
| '\('	        { LeftParenthesis }
| '\)'	        { RightParenthesis }

TOKEN TYPE { Token } NAMES
| integer       { Integer $$ }
| '+'           { Plus }
| '-'           { Minus }
| '*'           { Star }
| '/'           { Slash }
| '('           { LeftParenthesis }
| ')'           { RightParenthesis }

PARSER { parseExpression }
Expression :: { Int }
    | Term
    { $1 }
    | Expression '+' Term
    { $1 + $3 }
    | Expression '-' Term
    { $1 - $3 }

Term :: { Int }
    | Factor
    { $1 }
    | Term '*' Factor
    { $1 * $3 }
    | Term '/' Factor
    { $1 / $3 }

Factor :: { Int }
    | integer
    { $1 }
    | '(' Expression ')'
    { $2 }

--

type Parse = Error ParseError


data Token = Integer Int
           | Plus
           | Minus
           | Star
           | Slash
           | LeftParenthesis
           | RightParenthesis


data ParseError = ParseError String
instance Error ParseError where
    strMsg message = ParseError message
instance Show ParseError where
    show (ParseError string) = string


main :: IO ()
main = do
  let loop = do
        line <- getLine
        case line of
          "" -> return ()
          _ -> do
            eitherErrorResult = runError (parseExpression line)
            case eitherErrorResult of
              Left error -> putStrLn $ "Parse error: " ++ (show error)
              Right result -> putStrLn $ "Result: " ++ (show result)
            loop
  loop
